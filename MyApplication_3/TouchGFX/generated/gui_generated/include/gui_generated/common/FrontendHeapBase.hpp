/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef FRONTENDHEAPBASE_HPP
#define FRONTENDHEAPBASE_HPP

#include <common/Meta.hpp>
#include <common/Partition.hpp>
#include <mvp/MVPHeap.hpp>

#include <touchgfx/transitions/NoTransition.hpp>
#include <touchgfx/transitions/SlideTransition.hpp>

#include <gui/common/FrontendApplication.hpp>
#include <gui/model/Model.hpp>

#include <gui/home_screen/HOMEView.hpp>
#include <gui/home_screen/HOMEPresenter.hpp>
#include <gui/settings_menu_screen/SETTINGS_MENUView.hpp>
#include <gui/settings_menu_screen/SETTINGS_MENUPresenter.hpp>
#include <gui/settings_work_position_screen/SETTINGS_WORK_POSITIONView.hpp>
#include <gui/settings_work_position_screen/SETTINGS_WORK_POSITIONPresenter.hpp>
#include <gui/settings_screen/SETTINGSView.hpp>
#include <gui/settings_screen/SETTINGSPresenter.hpp>
#include <gui/settings_global_screen/SETTINGS_GLOBALView.hpp>
#include <gui/settings_global_screen/SETTINGS_GLOBALPresenter.hpp>
#include <gui/settings_cooling_time_screen/SETTINGS_COOLING_TIMEView.hpp>
#include <gui/settings_cooling_time_screen/SETTINGS_COOLING_TIMEPresenter.hpp>
#include <gui/manual_screen/MANUALView.hpp>
#include <gui/manual_screen/MANUALPresenter.hpp>
#include <gui/monitor_screen/MONITORView.hpp>
#include <gui/monitor_screen/MONITORPresenter.hpp>
#include <gui/alarm_history_screen/ALARM_HISTORYView.hpp>
#include <gui/alarm_history_screen/ALARM_HISTORYPresenter.hpp>
#include <gui/tip_1_screen/TIP_1View.hpp>
#include <gui/tip_1_screen/TIP_1Presenter.hpp>
#include <gui/tip_2_screen/TIP_2View.hpp>
#include <gui/tip_2_screen/TIP_2Presenter.hpp>
#include <gui/tip_3_screen/TIP_3View.hpp>
#include <gui/tip_3_screen/TIP_3Presenter.hpp>
#include <gui/tip_4_screen/TIP_4View.hpp>
#include <gui/tip_4_screen/TIP_4Presenter.hpp>
#include <gui/offsets_screen/OFFSETSView.hpp>
#include <gui/offsets_screen/OFFSETSPresenter.hpp>
#include <gui/test_press_screen/TEST_PRESSView.hpp>
#include <gui/test_press_screen/TEST_PRESSPresenter.hpp>


/**
 * This class provides the memory that shall be used for memory allocations
 * in the frontend. A single instance of the FrontendHeap is allocated once (in heap
 * memory), and all other frontend objects such as views, presenters and data model are
 * allocated within the scope of this FrontendHeap. As such, the RAM usage of the entire
 * user interface is sizeof(FrontendHeap).
 *
 * @note The FrontendHeap reserves memory for the most memory-consuming presenter and
 * view only. The largest of these classes are determined at compile-time using template
 * magic. As such, it is important to add all presenters, views and transitions to the
 * type lists in this class.
 *
 */
class FrontendHeapBase : public touchgfx::MVPHeap
{
public:
    /**
     * A list of all view types. Must end with meta::Nil.
     * @note All view types used in the application MUST be added to this list!
     */
    typedef touchgfx::meta::TypeList< HOMEView,
            touchgfx::meta::TypeList< SETTINGS_MENUView,
            touchgfx::meta::TypeList< SETTINGS_WORK_POSITIONView,
            touchgfx::meta::TypeList< SETTINGSView,
            touchgfx::meta::TypeList< SETTINGS_GLOBALView,
            touchgfx::meta::TypeList< SETTINGS_COOLING_TIMEView,
            touchgfx::meta::TypeList< MANUALView,
            touchgfx::meta::TypeList< MONITORView,
            touchgfx::meta::TypeList< ALARM_HISTORYView,
            touchgfx::meta::TypeList< TIP_1View,
            touchgfx::meta::TypeList< TIP_2View,
            touchgfx::meta::TypeList< TIP_3View,
            touchgfx::meta::TypeList< TIP_4View,
            touchgfx::meta::TypeList< OFFSETSView,
            touchgfx::meta::TypeList< TEST_PRESSView,
            touchgfx::meta::Nil > > > > > > > > > > > > > >
            > GeneratedViewTypes;

    /**
     * Determine (compile time) the View type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedViewTypes >::type MaxGeneratedViewType;

    /**
     * A list of all presenter types. Must end with meta::Nil.
     * @note All presenter types used in the application MUST be added to this list!
     */
    typedef touchgfx::meta::TypeList< HOMEPresenter,
            touchgfx::meta::TypeList< SETTINGS_MENUPresenter,
            touchgfx::meta::TypeList< SETTINGS_WORK_POSITIONPresenter,
            touchgfx::meta::TypeList< SETTINGSPresenter,
            touchgfx::meta::TypeList< SETTINGS_GLOBALPresenter,
            touchgfx::meta::TypeList< SETTINGS_COOLING_TIMEPresenter,
            touchgfx::meta::TypeList< MANUALPresenter,
            touchgfx::meta::TypeList< MONITORPresenter,
            touchgfx::meta::TypeList< ALARM_HISTORYPresenter,
            touchgfx::meta::TypeList< TIP_1Presenter,
            touchgfx::meta::TypeList< TIP_2Presenter,
            touchgfx::meta::TypeList< TIP_3Presenter,
            touchgfx::meta::TypeList< TIP_4Presenter,
            touchgfx::meta::TypeList< OFFSETSPresenter,
            touchgfx::meta::TypeList< TEST_PRESSPresenter,
            touchgfx::meta::Nil > > > > > > > > > > > > > >
            > GeneratedPresenterTypes;

    /**
     * Determine (compile time) the Presenter type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedPresenterTypes >::type MaxGeneratedPresenterType;

    /**
     * A list of all transition types. Must end with meta::Nil.
     * @note All transition types used in the application MUST be added to this list!
     */
    typedef touchgfx::meta::TypeList< touchgfx::NoTransition,
            touchgfx::meta::TypeList< SlideTransition<EAST>,
            touchgfx::meta::Nil >
            > GeneratedTransitionTypes;

    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoHOMEScreenNoTransition();
    }
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
        : MVPHeap(presenters, views, transitions, app)
    {

    }

};

#endif // FRONTENDHEAPBASE_HPP
