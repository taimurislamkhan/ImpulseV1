/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthRTL(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthRTL(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    nextCharacters.replaceAt0(unicodeConverter(direction));
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
    unicodeConverterInit();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringRTL(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

// Default TypedTextDatabase
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE = {
    0x54, 0x49, 0x50, 0x20, 0x32, 0x20, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x4f, 0x52, 0x4d, 0x45, 0x52, 0x20, 0x54, 0x45, 0x4d, 0x50, 0x20, 0x48, 0x49, 0x47, 0x48, 0x0, // @0 "TIP 2 TRANSFORMER TEMP HIGH"
    0x54, 0x49, 0x50, 0x20, 0x31, 0x20, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x0, // @28 "TIP 1 DISTANCE NOT REACHED"
    0x54, 0x49, 0x50, 0x20, 0x33, 0x20, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x20, 0x4e, 0x4f, 0x54, 0x20, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45, 0x44, 0x0, // @55 "TIP 3 DISTANCE NOT REACHED"
    0x42, 0x4f, 0x53, 0x53, 0x20, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x20, 0x54, 0x4f, 0x4c, 0x45, 0x52, 0x41, 0x4e, 0x43, 0x45, 0x0, // @82 "BOSS HEIGHT TOLERANCE"
    0x54, 0x49, 0x50, 0x20, 0x31, 0x20, 0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x3a, 0x20, 0x30, 0x2e, 0x30, 0x6d, 0x6d, 0x0, // @104 "TIP 1 DISTANCE: 0.0mm"
    0x54, 0x45, 0x53, 0x54, 0x20, 0x50, 0x52, 0x45, 0x53, 0x53, 0x20, 0x53, 0x45, 0x54, 0x54, 0x49, 0x4e, 0x47, 0x53, 0x0, // @126 "TEST PRESS SETTINGS"
    0x54, 0x49, 0x50, 0x20, 0x31, 0x20, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x3a, 0x20, 0x30, 0x30, 0x30, 0x20, 0x4a, 0x0, // @146 "TIP 1 ENERGY: 000 J"
    0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x20, 0x46, 0x52, 0x4f, 0x4d, 0x20, 0x54, 0x4f, 0x50, 0x20, 0x0, // @166 "DISTANCE FROM TOP "
    0x50, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x20, 0x53, 0x50, 0x45, 0x45, 0x44, 0x20, 0x43, 0x55, 0x52, 0x56, 0x45, 0x0, // @185 "PLATEN SPEED CURVE"
    0x53, 0x45, 0x54, 0x20, 0x57, 0x4f, 0x52, 0x4b, 0x20, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x0, // @204 "SET WORK POSITION"
    0x54, 0x49, 0x50, 0x20, 0x31, 0x20, 0x54, 0x45, 0x4d, 0x50, 0x3a, 0x20, 0x30, 0x30, 0x30, 0x20, 0x46, 0x0, // @222 "TIP 1 TEMP: 000 F"
    0x41, 0x49, 0x52, 0x20, 0x50, 0x52, 0x45, 0x53, 0x53, 0x55, 0x52, 0x45, 0x20, 0x4c, 0x4f, 0x57, 0x0, // @240 "AIR PRESSURE LOW"
    0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x20, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x53, 0x0, // @257 "MANUAL CONTROLS"
    0x45, 0x4e, 0x43, 0x4f, 0x44, 0x45, 0x52, 0x20, 0x42, 0x59, 0x50, 0x41, 0x53, 0x53, 0x0, // @273 "ENCODER BYPASS"
    0x55, 0x2e, 0x53, 0x2e, 0x20, 0x48, 0x45, 0x41, 0x54, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x0, // @288 "U.S. HEATSTAKE"
    0x41, 0x4c, 0x41, 0x52, 0x4d, 0x20, 0x48, 0x49, 0x53, 0x54, 0x4f, 0x52, 0x59, 0x0, // @303 "ALARM HISTORY"
    0x42, 0x6f, 0x73, 0x73, 0x3a, 0x20, 0x2, 0x0, // @317 "Boss: <>"
    0x43, 0x59, 0x43, 0x4c, 0x45, 0x20, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x0, // @325 "CYCLE CONTROL"
    0x43, 0x75, 0x72, 0x72, 0x3a, 0x20, 0x2, 0x0, // @339 "Curr: <>"
    0x44, 0x6f, 0x77, 0x6e, 0x20, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @347 "Down Position"
    0x45, 0x2d, 0x53, 0x54, 0x4f, 0x50, 0x20, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x0, // @361 "E-STOP ACTIVE"
    0x43, 0x4f, 0x4f, 0x4c, 0x49, 0x4e, 0x47, 0x20, 0x54, 0x49, 0x4d, 0x45, 0x0, // @375 "COOLING TIME"
    0x48, 0x6f, 0x6d, 0x65, 0x20, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x0, // @388 "Home Machine"
    0x20, 0x2, 0x20, 0x4d, 0x4d, 0x0, // @401 " <> MM"
    0x2, 0x20, 0x20, 0x4d, 0x4d, 0x0, // @407 "<>  MM"
    0x48, 0x4f, 0x4d, 0x45, 0x20, 0x53, 0x57, 0x49, 0x54, 0x43, 0x48, 0x0, // @413 "HOME SWITCH"
    0x52, 0x49, 0x47, 0x48, 0x54, 0x20, 0x53, 0x54, 0x41, 0x52, 0x54, 0x0, // @425 "RIGHT START"
    0x55, 0x70, 0x20, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x0, // @437 "Up Position"
    0x2, 0x20, 0x6d, 0x6d, 0x0, // @449 "<> mm"
    0x42, 0x52, 0x41, 0x53, 0x53, 0x20, 0x4d, 0x4f, 0x44, 0x45, 0x0, // @454 "BRASS MODE"
    0x4c, 0x45, 0x46, 0x54, 0x20, 0x53, 0x54, 0x41, 0x52, 0x54, 0x0, // @465 "LEFT START"
    0x31, 0x30, 0x30, 0x2e, 0x32, 0x33, 0x20, 0x4d, 0x4d, 0x0, // @476 "100.23 MM"
    0x2, 0x20, 0x4a, 0x0, // @486 "<> J"
    0x2, 0x20, 0x73, 0x0, // @490 "<> s"
    0x2, 0x25, 0x0, // @494 "<>%"
    0x41, 0x55, 0x54, 0x4f, 0x46, 0x49, 0x4e, 0x44, 0x0, // @497 "AUTOFIND"
    0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x0, // @506 "CRITICAL"
    0x44, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x0, // @515 "DISTANCE"
    0x53, 0x45, 0x56, 0x45, 0x52, 0x49, 0x54, 0x59, 0x0, // @524 "SEVERITY"
    0x43, 0x4f, 0x4f, 0x4c, 0x49, 0x4e, 0x47, 0x0, // @533 "COOLING"
    0x48, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x0, // @541 "HEATING"
    0x4d, 0x4f, 0x4e, 0x49, 0x54, 0x4f, 0x52, 0x0, // @549 "MONITOR"
    0x4f, 0x46, 0x46, 0x53, 0x45, 0x54, 0x53, 0x0, // @557 "OFFSETS"
    0x50, 0x52, 0x45, 0x48, 0x45, 0x41, 0x54, 0x0, // @565 "PREHEAT"
    0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x0, // @573 "WARNING"
    0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x0, // @581 "ENERGY"
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x3a, 0x0, // @588 "ERROR:"
    0x4d, 0x41, 0x4e, 0x55, 0x41, 0x4c, 0x0, // @595 "MANUAL"
    0x50, 0x4c, 0x41, 0x54, 0x45, 0x4e, 0x0, // @602 "PLATEN"
    0x41, 0x44, 0x4d, 0x49, 0x4e, 0x0, // @609 "ADMIN"
    0x41, 0x4c, 0x41, 0x52, 0x4d, 0x0, // @615 "ALARM"
    0x45, 0x52, 0x52, 0x4f, 0x52, 0x0, // @621 "ERROR"
    0x4d, 0x49, 0x4e, 0x4f, 0x52, 0x0, // @627 "MINOR"
    0x54, 0x49, 0x50, 0x20, 0x31, 0x0, // @633 "TIP 1"
    0x54, 0x49, 0x50, 0x20, 0x32, 0x0, // @639 "TIP 2"
    0x54, 0x49, 0x50, 0x20, 0x33, 0x0, // @645 "TIP 3"
    0x54, 0x49, 0x50, 0x20, 0x34, 0x0, // @651 "TIP 4"
    0x54, 0x49, 0x50, 0x20, 0x35, 0x0, // @657 "TIP 5"
    0x54, 0x49, 0x50, 0x20, 0x36, 0x0, // @663 "TIP 6"
    0x54, 0x49, 0x50, 0x20, 0x37, 0x0, // @669 "TIP 7"
    0x54, 0x49, 0x50, 0x20, 0x38, 0x0, // @675 "TIP 8"
    0x54, 0x49, 0x50, 0x31, 0x0, // @681 "TIP1"
    0x54, 0x49, 0x50, 0x32, 0x0, // @686 "TIP2"
    0x54, 0x49, 0x50, 0x33, 0x0, // @691 "TIP3"
    0x54, 0x49, 0x50, 0x34, 0x0, // @696 "TIP4"
    0x4f, 0x4b, 0x0, // @701 "OK"
    0x30, 0x0, // @704 "0"
    0x39, 0x0 // @706 "9"
};

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const uint32_t indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

// Array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

// Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] = {
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}
